<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.inheaven.aida.happy.trading.mapper.OrderMapper">
    <resultMap id="order" type="ru.inheaven.aida.happy.trading.entity.Order">
        <id column="id" property="id"/>
        <result column="order_id" property="orderId"/>
        <result column="strategy_id" property="strategyId"/>
        <result column="position_id" property="positionId"/>
        <result column="exchange_type" property="exchangeType"/>
        <result column="type" property="type"/>
        <result column="symbol" property="symbol"/>
        <result column="symbol_type" property="symbolType"/>
        <result column="price" property="price"/>
        <result column="amount" property="amount"/>
        <result column="filled_amount" property="filledAmount"/>
        <result column="avg_price" property="avgPrice"/>
        <result column="fee" property="fee"/>
        <result column="created" property="created"/>
        <result column="open" property="open"/>
        <result column="closed" property="closed"/>
        <result column="status" property="status"/>
    </resultMap>

    <insert id="insertOrder" parameterType="ru.inheaven.aida.happy.trading.entity.Order" keyProperty="id" useGeneratedKeys="true">
        insert ignore into `order` (order_id, strategy_id, position_id, exchange_type, type, symbol, symbol_type, price, amount,
                             filled_amount, avg_price, fee, created, `open`, closed, `status`)
        value (#{orderId}, #{strategyId}, #{positionId}, #{exchangeType}, #{type}, #{symbol}, #{symbolType}, #{price}, #{amount},
               #{filledAmount}, #{avgPrice}, #{fee}, #{created}, #{open}, #{closed}, #{status})
    </insert>

    <update id="updateOrder" parameterType="ru.inheaven.aida.happy.trading.entity.Order">
        update `order` set order_id = #{orderId}, filled_amount = #{filledAmount}, avg_price = #{avgPrice},
            fee = #{fee}, `open` = #{open}, closed = #{closed}, `status` = #{status}
        where id = #{id}
    </update>

    <select id="selectOpenOrders" resultMap="order" parameterType="long">
        select * from `order` where closed is null and strategy_id = #{strategyId}
    </select>

    <select id="selectOrderPosition" parameterType="ru.inheaven.aida.happy.trading.entity.Strategy"
            resultType="ru.inheaven.aida.happy.trading.entity.OrderPosition">
        select `type`, count(id) as `count`, SUM(10*amount/avg_price) as avg, SUM(amount*avg_price)/SUM(amount) as price
        from `order` where strategy_id = #{id} and status = 'CLOSED' and `closed` > #{sessionStart} group by `type`;
    </select>

    <select id="selectOrderCount" parameterType="map" resultType="int">
        select count(*) from `order` where strategy_id = #{id} and status = 'CLOSED'
        and `closed` > #{sessionStart} and `type` = #{orderType}
    </select>

    <select id="selectAllOrderRate" resultType="long">
        select count(*) from `order` where status = 'CLOSED' and `closed` > date_sub(now(), interval 1 hour);
    </select>

    <select id="selectOrderVolume" parameterType="map" resultType="decimal">
        select SUM(10*o.amount/o.avg_price) from (select * from `order` where strategy_id = #{id} and status = 'CLOSED'
          and `closed` > #{sessionStart} and `type` = #{orderType} limit #{first}, #{count}) o
    </select>

    <select id="selectLast100OrderTimes" resultType="date">
        select closed from `order` where status = 'CLOSED' order by closed desc limit 100;
    </select>

    <select id="selectLast6HourOrderTimes" resultType="date">
        select closed from `order` where status = 'CLOSED' and `closed` > date_sub(now(), interval 6 hour);
    </select>

    <select id="selectMinTradeProfit" resultType="decimal" parameterType="map">
        select SUM(
          IF(o1.symbol_type is null, (o1.price*0.998 - o2.price)*IF(o2.amount > o1.amount, o1.amount, o2.amount),
          IF(o1.symbol = 'BTC/USD', (100/o2.price - 100/o1.price)*o1.price*o1.amount - 0.03*o1.amount,
          IF(o1.symbol = 'LTC/USD', (10/o2.price - 10/o1.price)*o1.price*o1.amount - 0.003*o1.amount, 0))))
        from `order` o1 left join `order` o2 on o1.position_id = o2.position_id
        where o1.position_id is not null and o2.position_id is not null and
          o1.type in ('CLOSE_LONG', 'ASK') and o2.type in ('OPEN_LONG', 'BID') and
          o1.status = 'CLOSED' and o2.status = 'CLOSED'
          <if test="strategyId != null">and o1.strategy_id = #{strategyId} and o2.strategy_id = #{strategyId}</if>
          <if test="startDate != null">and o1.closed > #{startDate} and o2.closed > #{startDate}</if>
          <if test="endDate != null">and #{endDate} > o1.closed and #{endDate} > o2.closed</if>
    </select>

    <select id="selectRandomTradeProfit" resultType="decimal" parameterType="map">
        select SUM(
          IF(o1.symbol_type is null, (o1.price*0.998*o1.amount - o2.price*o2.amount),
          IF(o1.symbol = 'BTC/USD', (100/o2.price - 100/o1.price)*o1.price*o1.amount - 0.03*o1.amount,
          IF(o1.symbol = 'LTC/USD', (10/o2.price - 10/o1.price)*o1.price*o1.amount - 0.003*o1.amount, 0))))
        from `order` o1 left join `order` o2 on o1.position_id = o2.position_id
        where o1.position_id is not null and o2.position_id is not null and
          o1.type in ('CLOSE_LONG', 'ASK') and o2.type in ('OPEN_LONG', 'BID') and
          o1.status = 'CLOSED' and o2.status = 'CLOSED'
          <if test="strategyId != null">and o1.strategy_id = #{strategyId} and o2.strategy_id = #{strategyId}</if>
          <if test="startDate != null">and o1.closed > #{startDate} and o2.closed > #{startDate}</if>
          <if test="endDate != null">and #{endDate} > o1.closed and #{endDate} > o2.closed</if>
    </select>

    <select id="selectMinTradeVolume" resultType="decimal" parameterType="map">
        select SUM(
            IF(o1.symbol_type is null, IF(o2.amount > o1.amount, o1.amount*(o1.price + o2.price), o2.amount*(o1.price + o2.price)),
            IF(o1.symbol = 'BTC/USD', (o1.amount + o2.amount)*100,
            IF(o1.symbol = 'LTC/USD', (o1.amount + o2.amount)*10, 0))))
        from `order` o1 left join `order` o2 on o1.position_id = o2.position_id
        where o1.position_id is not null and o2.position_id is not null and
            o1.type in ('CLOSE_LONG', 'ASK') and o2.type in ('OPEN_LONG', 'BID') and
            o1.status = 'CLOSED' and o2.status = 'CLOSED'
            <if test="strategyId != null">and o1.strategy_id = #{strategyId} and o2.strategy_id = #{strategyId}</if>
            <if test="startDate != null">and o1.closed > #{startDate} and o2.closed > #{startDate}</if>
            <if test="endDate != null">and #{endDate} > o1.closed and #{endDate} > o2.closed</if>
    </select>

    <select id="selectRandomTradeVolume" resultType="decimal" parameterType="map">
        select SUM(
            IF(o1.symbol_type is null, o1.amount*o1.price + o2.amount*o2.price,
            IF(o1.symbol = 'BTC/USD', (o1.amount + o2.amount)*100,
            IF(o1.symbol = 'LTC/USD', (o1.amount + o2.amount)*10, 0))))
        from `order` o1 left join `order` o2 on o1.position_id = o2.position_id
        where o1.position_id is not null and o2.position_id is not null and
            o1.type in ('CLOSE_LONG', 'ASK') and o2.type in ('OPEN_LONG', 'BID') and
            o1.status = 'CLOSED' and o2.status = 'CLOSED'
            <if test="strategyId != null">and o1.strategy_id = #{strategyId} and o2.strategy_id = #{strategyId}</if>
            <if test="startDate != null">and o1.closed > #{startDate} and o2.closed > #{startDate}</if>
            <if test="endDate != null">and #{endDate} > o1.closed and #{endDate} > o2.closed</if>
    </select>

    <select id="selectTradeCount" resultType="decimal" parameterType="map">
        select COUNT(o1.id)
        from `order` o1 left join `order` o2 on o1.position_id = o2.position_id
        where o1.position_id is not null and o2.position_id is not null and
            o1.type in ('CLOSE_LONG', 'ASK') and o2.type in ('OPEN_LONG', 'BID') and
            o1.status = 'CLOSED' and o2.status = 'CLOSED'
            <if test="strategyId != null">and o1.strategy_id = #{strategyId} and o2.strategy_id = #{strategyId}</if>
            <if test="startDate != null">and o1.closed > #{startDate} and o2.closed > #{startDate}</if>
            <if test="endDate != null">and #{endDate} > o1.closed and #{endDate} > o2.closed</if>
    </select>
</mapper>