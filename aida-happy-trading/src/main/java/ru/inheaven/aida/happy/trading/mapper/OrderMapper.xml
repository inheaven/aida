<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.inheaven.aida.happy.trading.mapper.OrderMapper">
    <resultMap id="order" type="ru.inheaven.aida.happy.trading.entity.Order">
        <id column="id" property="id"/>
        <result column="order_id" property="orderId"/>
        <result column="strategy_id" property="strategyId"/>
        <result column="position_id" property="positionId"/>
        <result column="exchange_type" property="exchangeType"/>
        <result column="type" property="type"/>
        <result column="symbol" property="symbol"/>
        <result column="symbol_type" property="symbolType"/>
        <result column="price" property="price"/>
        <result column="amount" property="amount"/>
        <result column="filled_amount" property="filledAmount"/>
        <result column="avg_price" property="avgPrice"/>
        <result column="fee" property="fee"/>
        <result column="created" property="created"/>
        <result column="open" property="open"/>
        <result column="closed" property="closed"/>
        <result column="status" property="status"/>
    </resultMap>

    <insert id="insertOrder" parameterType="ru.inheaven.aida.happy.trading.entity.Order" keyProperty="id" useGeneratedKeys="true">
        insert ignore into `order` (order_id, strategy_id, position_id, exchange_type, type, symbol, symbol_type, price, amount,
                             filled_amount, avg_price, fee, created, `open`, closed, `status`)
        value (#{orderId}, #{strategyId}, #{positionId}, #{exchangeType}, #{type}, #{symbol}, #{symbolType}, #{price}, #{amount},
               #{filledAmount}, #{avgPrice}, #{fee}, #{created}, #{open}, #{closed}, #{status})
    </insert>

    <update id="updateOrder" parameterType="ru.inheaven.aida.happy.trading.entity.Order">
        update `order` set order_id = #{orderId}, filled_amount = #{filledAmount}, avg_price = #{avgPrice},
            fee = #{fee}, `open` = #{open}, closed = #{closed}, `status` = #{status}
        where id = #{id}
    </update>

    <select id="selectOpenOrders" resultMap="order" parameterType="long">
        select * from `order` where closed is null and strategy_id = #{strategyId}
    </select>

    <select id="selectOrderPosition" parameterType="ru.inheaven.aida.happy.trading.entity.Strategy"
            resultType="ru.inheaven.aida.happy.trading.entity.OrderPosition">
        select `type`, count(id) as `count`, SUM(10*amount/avg_price) as avg, SUM(amount*avg_price)/SUM(amount) as price
        from `order` where strategy_id = #{id} and status = 'CLOSED' and `closed` > #{sessionStart} group by `type`;
    </select>

    <select id="selectOrderCount" parameterType="map" resultType="int">
        select count(*) from `order` where strategy_id = #{id} and status = 'CLOSED'
        and `closed` > #{sessionStart} and `type` = #{orderType}
    </select>

    <select id="selectAllOrderRate" resultType="long">
        select count(*) from `order` where status = 'CLOSED' and `closed` > date_sub(now(), interval 1 hour);
    </select>

    <select id="selectOrderVolume" parameterType="map" resultType="decimal">
        select SUM(10*o.amount/o.avg_price) from (select * from `order` where strategy_id = #{id} and status = 'CLOSED'
          and `closed` > #{sessionStart} and `type` = #{orderType} limit #{first}, #{count}) o
    </select>

    <select id="selectLast100OrderTimes" resultType="date">
        select closed from `order` where status = 'CLOSED' order by closed desc limit 100;
    </select>

    <select id="selectLast6HourOrderTimes" resultType="date">
        select closed from `order` where status = 'CLOSED' and `closed` > date_sub(now(), interval 6 hour);
    </select>

</mapper>